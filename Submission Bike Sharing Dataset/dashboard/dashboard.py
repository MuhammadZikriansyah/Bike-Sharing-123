# -*- coding: utf-8 -*-
"""notebook - dashboard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DcnDLaNSzhYah7ZXeD813D6ydDZGEZgQ
"""

# !pip install streamlit babel

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from babel.numbers import format_currency
from matplotlib.colors import TwoSlopeNorm
sns.set(style='dark')

df_hour_2011 = pd.read_csv("data_hour_2011.csv")
df_hour_2012 = pd.read_csv("data_hour_2012.csv")
df_day_2011 = pd.read_csv("data_day_2011.csv")
df_day_2012 = pd.read_csv("data_day_2012.csv")
day = pd.read_csv("day.csv")
hour = pd.read_csv("hour.csv")

def df_date(df):
  df.sort_values(by="dteday", inplace=True)
  df.reset_index(inplace=True)
  df["dteday"] = pd.to_datetime(df["dteday"])
  return df

day = df_date(day)
hour = df_date(hour)

def min(df):
  min_date = df["dteday"].min()
  return min_date

def max(df):
  max_date = df["dteday"].max()
  return max_date

with st.sidebar:
    # Menambahkan logo perusahaan
    st.image("https://github.com/dicodingacademy/assets/raw/main/logo.png")

    # Mengambil start_date & end_date dari date_input
    start_date, end_date = st.date_input(
        label='Rentang Waktu',min_value=min(day),
        max_value=max(day),
        value=[min(day), max(day)]
    )

main_df = day[(day["dteday"] >= str(start_date)) & (day["dteday"] <= str(end_date))]
main_df_hour = hour[(hour["dteday"] >= str(start_date)) & (hour["dteday"] <= str(end_date))]

st.header('Bike Sharing Dashboard :sparkles:')

st.subheader('Total Pesanan Harian Tahun 2011 dan 2012')

col1, col2 = st.columns(2)

with col1:
    total_2011 = df_day_2011.cnt.sum()
    st.metric("Total Pesanan Tahun 2011", value=total_2011)

with col2:
    total_2012 = df_day_2012.cnt.sum()
    st.metric("Total Pesanan Tahun 2012", value=total_2012)

fig, ax = plt.subplots(figsize=(16, 8))
ax.plot(
    day["dteday"],
    day["cnt"],
    marker='o',
    linewidth=2,
    color="#90CAF9"
)
ax.tick_params(axis='y', labelsize=20)
ax.tick_params(axis='x', labelsize=15)

st.pyplot(fig)

st.subheader("Faktor yang Berpengaruh Terhadap Jumlah Pesanan")

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(35, 15))

#colors = ["#90CAF9", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]
columns = ['weathersit', 'temp', 'atemp', 'hum', 'windspeed', 'cnt']

def get_corr(df):
  cor = df.corr().unstack()
  cor = cor['cnt'].sort_values(ascending=False)
  cor = cor.drop('cnt')
  return cor

corr_day_2011 = get_corr(df_day_2011[columns])
corr_day_2012 = get_corr(df_day_2012[columns])

norm = TwoSlopeNorm(vmin=-1, vcenter=0, vmax=1)
colors_2011 = [plt.cm.RdYlGn(norm(c)) for c in corr_day_2011.values]

corr_day_2011.plot.barh(color=colors_2011, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel("Nilai Korelasi", fontsize=30)
ax[0].set_title("Korelasi Cuaca Pada Tahun 2011", loc="center", fontsize=50)
ax[0].tick_params(axis='y', labelsize=35)
ax[0].tick_params(axis='x', labelsize=30)


colors_2012 = [plt.cm.RdYlGn(norm(c)) for c in corr_day_2012.values]

corr_day_2012.plot.barh(color=colors_2012, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel("Nilai Korelasi", fontsize=30)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Korelasi Cuaca Pada Tahun 2012", loc="center", fontsize=50)
ax[1].tick_params(axis='y', labelsize=35)
ax[1].tick_params(axis='x', labelsize=30)

st.pyplot(fig)

st.caption('Copyright (c) Dicoding 2023')
